// Code generated by entc, DO NOT EDIT.

package http

import (
	"net/http"
	"strconv"

	"github.com/go-chi/chi/v5"
	"github.com/masseelch/elk/internal/integration/pets/ent"
	"github.com/masseelch/render"
	"go.uber.org/zap"
)

// Delete removes a ent.Category from the database.
func (h CategoryHandler) Delete(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Delete"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		render.BadRequest(w, r, "id must be an integer greater zero")
		return
	}
	if err := h.client.Category.DeleteOneID(id).Exec(r.Context()); err != nil {
		switch err.(type) {
		case *ent.NotFoundError:
			msg := stripEntError(err)
			l.Info(msg, zap.Int("id", id), zap.Error(err))
			render.NotFound(w, r, "category not found")
		default:
			l.Error("error deleting category from db", zap.Int("id", id), zap.Error(err))
			render.InternalServerError(w, r, nil)
		}
		return
	}
	l.Info("category deleted", zap.Int("id", id))
	render.NoContent(w)
}

// Delete removes a ent.Owner from the database.
func (h OwnerHandler) Delete(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Delete"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		render.BadRequest(w, r, "id must be an integer greater zero")
		return
	}
	if err := h.client.Owner.DeleteOneID(id).Exec(r.Context()); err != nil {
		switch err.(type) {
		case *ent.NotFoundError:
			msg := stripEntError(err)
			l.Info(msg, zap.Int("id", id), zap.Error(err))
			render.NotFound(w, r, "owner not found")
		default:
			l.Error("error deleting owner from db", zap.Int("id", id), zap.Error(err))
			render.InternalServerError(w, r, nil)
		}
		return
	}
	l.Info("owner deleted", zap.Int("id", id))
	render.NoContent(w)
}

// Delete removes a ent.Pet from the database.
func (h PetHandler) Delete(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Delete"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		render.BadRequest(w, r, "id must be an integer greater zero")
		return
	}
	if err := h.client.Pet.DeleteOneID(id).Exec(r.Context()); err != nil {
		switch err.(type) {
		case *ent.NotFoundError:
			msg := stripEntError(err)
			l.Info(msg, zap.Int("id", id), zap.Error(err))
			render.NotFound(w, r, "pet not found")
		default:
			l.Error("error deleting pet from db", zap.Int("id", id), zap.Error(err))
			render.InternalServerError(w, r, nil)
		}
		return
	}
	l.Info("pet deleted", zap.Int("id", id))
	render.NoContent(w)
}
