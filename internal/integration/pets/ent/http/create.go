// Code generated by entc, DO NOT EDIT.

package http

import (
	"encoding/json"
	"net/http"

	"github.com/liip/sheriff"
	"github.com/masseelch/elk/internal/integration/pets/ent"
	"github.com/masseelch/elk/internal/integration/pets/ent/category"
	"github.com/masseelch/elk/internal/integration/pets/ent/owner"
	"github.com/masseelch/elk/internal/integration/pets/ent/pet"
	"github.com/masseelch/render"
	"go.uber.org/zap"
)

// Payload of a ent.Category create request.
type CategoryCreateRequest struct {
	Name *string `json:"name"`
	Pets []int   `json:"pets"`
}

// Create creates a new ent.Category and stores it in the database.
func (h CategoryHandler) Create(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Create"))
	// Get the post data.
	var d CategoryCreateRequest
	if err := json.NewDecoder(r.Body).Decode(&d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		render.BadRequest(w, r, "invalid json string")
		return
	}
	// Save the data.
	b := h.client.Category.Create()
	// TODO: what about slice fields that have custom marshallers?
	if d.Name != nil {
		b.SetName(*d.Name)
	}
	if d.Pets != nil {
		b.AddPetIDs(d.Pets...)
	}
	// Store in database.
	e, err := b.Save(r.Context())
	if err != nil {
		l.Error("error saving category", zap.Error(err))
		render.InternalServerError(w, r, nil)
		return
	}
	// Reload entry.
	q := h.client.Category.Query().Where(category.ID(e.ID))
	e, err = q.Only(r.Context())
	if err != nil {
		switch err.(type) {
		case *ent.NotFoundError:
			msg := stripEntError(err)
			l.Info(msg, zap.Int("id", e.ID), zap.Error(err))
			render.NotFound(w, r, msg)
		default:
			l.Error("error fetching category from db", zap.Int("id", e.ID), zap.Error(err))
			render.InternalServerError(w, r, nil)
		}
		return
	}
	j, err := sheriff.Marshal(&sheriff.Options{
		IncludeEmptyTag: true,
		Groups:          []string{"category"},
	}, e)
	if err != nil {
		l.Error("serialization error", zap.Int("id", e.ID), zap.Error(err))
		render.InternalServerError(w, r, nil)
		return
	}
	l.Info("category rendered", zap.Int("id", e.ID))
	render.OK(w, r, j)
}

// Payload of a ent.Owner create request.
type OwnerCreateRequest struct {
	Name *string `json:"name"`
	Age  *int    `json:"age"`
	Pets []int   `json:"pets"`
}

// Create creates a new ent.Owner and stores it in the database.
func (h OwnerHandler) Create(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Create"))
	// Get the post data.
	var d OwnerCreateRequest
	if err := json.NewDecoder(r.Body).Decode(&d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		render.BadRequest(w, r, "invalid json string")
		return
	}
	// Save the data.
	b := h.client.Owner.Create()
	// TODO: what about slice fields that have custom marshallers?
	if d.Name != nil {
		b.SetName(*d.Name)
	}
	if d.Age != nil {
		b.SetAge(*d.Age)
	}
	if d.Pets != nil {
		b.AddPetIDs(d.Pets...)
	}
	// Store in database.
	e, err := b.Save(r.Context())
	if err != nil {
		l.Error("error saving owner", zap.Error(err))
		render.InternalServerError(w, r, nil)
		return
	}
	// Reload entry.
	q := h.client.Owner.Query().Where(owner.ID(e.ID))
	e, err = q.Only(r.Context())
	if err != nil {
		switch err.(type) {
		case *ent.NotFoundError:
			msg := stripEntError(err)
			l.Info(msg, zap.Int("id", e.ID), zap.Error(err))
			render.NotFound(w, r, msg)
		default:
			l.Error("error fetching owner from db", zap.Int("id", e.ID), zap.Error(err))
			render.InternalServerError(w, r, nil)
		}
		return
	}
	j, err := sheriff.Marshal(&sheriff.Options{
		IncludeEmptyTag: true,
		Groups:          []string{"owner"},
	}, e)
	if err != nil {
		l.Error("serialization error", zap.Int("id", e.ID), zap.Error(err))
		render.InternalServerError(w, r, nil)
		return
	}
	l.Info("owner rendered", zap.Int("id", e.ID))
	render.OK(w, r, j)
}

// Payload of a ent.Pet create request.
type PetCreateRequest struct {
	Name     *string `json:"name"`
	Age      *int    `json:"age"`
	Category []int   `json:"category"`
	Owner    *int    `json:"owner"`
	Friends  []int   `json:"friends"`
}

// Create creates a new ent.Pet and stores it in the database.
func (h PetHandler) Create(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Create"))
	// Get the post data.
	var d PetCreateRequest
	if err := json.NewDecoder(r.Body).Decode(&d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		render.BadRequest(w, r, "invalid json string")
		return
	}
	// Validate the data.
	// TODO: what about slice fields that have custom marshallers?
	errs := make(map[string]string)
	if d.Name != nil {
		if err := pet.NameValidator(*d.Name); err != nil {
			errs["name"] = err.Error()
		}
	}
	if d.Age != nil {
		if err := pet.AgeValidator(*d.Age); err != nil {
			errs["age"] = err.Error()
		}
	}
	if len(errs) > 0 {
		l.Info("validation failed", zapFields(errs)...)
		render.BadRequest(w, r, errs)
		return
	}
	// Save the data.
	b := h.client.Pet.Create()
	// TODO: what about slice fields that have custom marshallers?
	if d.Name != nil {
		b.SetName(*d.Name)
	}
	if d.Age != nil {
		b.SetAge(*d.Age)
	}
	if d.Category != nil {
		b.AddCategoryIDs(d.Category...)
	}
	if d.Owner != nil {
		b.SetOwnerID(*d.Owner)

	}
	if d.Friends != nil {
		b.AddFriendIDs(d.Friends...)
	}
	// Store in database.
	e, err := b.Save(r.Context())
	if err != nil {
		l.Error("error saving pet", zap.Error(err))
		render.InternalServerError(w, r, nil)
		return
	}
	// Reload entry.
	q := h.client.Pet.Query().Where(pet.ID(e.ID))
	e, err = q.Only(r.Context())
	if err != nil {
		switch err.(type) {
		case *ent.NotFoundError:
			msg := stripEntError(err)
			l.Info(msg, zap.Int("id", e.ID), zap.Error(err))
			render.NotFound(w, r, msg)
		default:
			l.Error("error fetching pet from db", zap.Int("id", e.ID), zap.Error(err))
			render.InternalServerError(w, r, nil)
		}
		return
	}
	j, err := sheriff.Marshal(&sheriff.Options{
		IncludeEmptyTag: true,
		Groups:          []string{"pet"},
	}, e)
	if err != nil {
		l.Error("serialization error", zap.Int("id", e.ID), zap.Error(err))
		render.InternalServerError(w, r, nil)
		return
	}
	l.Info("pet rendered", zap.Int("id", e.ID))
	render.OK(w, r, j)
}
