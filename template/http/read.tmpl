{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "http/read" }}
    {{- with extend $ "Package" "http" -}}
        {{ template "header" . }}
    {{ end }}
    import "github.com/go-chi/chi/v5" {{/* This is needed for stupid SIV rule */}}

    {{ $pkg := base $.Config.Package }}
    {{ range $n := $.Nodes }}
        // Read fetches the {{ $pkg }}.{{ $n.Name }} identified by a given url-parameter from the
        // database and renders it to the client.
        func (h *{{ $n.Name }}Handler) Read(w http.ResponseWriter, r *http.Request) {
            l := h.log.With(zap.String("method", "Read"))
            {{- template "helper/http/id-from-url" $n -}}

            // Create the query to fetch the {{ $n.Name }}
            q := h.client.{{ $n.Name }}.Query().Where({{ $n.Name | lower }}.ID({{ if $n.ID.HasGoType }}{{ $n.ID.Type }}(id){{ else }}id{{ end }}))

            {{- with edgesToLoad $n "read" }}
                // Eager load edges that are required on read operation.
                {{ . }}
            {{- end }}
            e, err := q.Only(r.Context())
            if err != nil {
                switch err.(type) {
                case *ent.NotFoundError:
                    msg := stripEntError(err)
                    l.Info(msg, zap.Int("{{ $n.ID.Name }}", id), zap.Error(err))
                    render.NotFound(w, r, msg)
                case *ent.NotSingularError:
                    msg := stripEntError(err)
                    l.Error(msg, zap.Int("{{ $n.ID.Name }}", id), zap.Error(err))
                    render.BadRequest(w, r, msg)
                default:
                    l.Error("error fetching {{ $n.Name | kebab }} from db", zap.Int("{{ $n.ID.Name }}", id), zap.Error(err))
                    render.InternalServerError(w, r, nil)
                }
                return
            }
            d, err := sheriff.Marshal(&sheriff.Options{
                IncludeEmptyTag: true,
                Groups: []string{
                    {{- with $n.Annotations.ElkSchema.ReadGroups -}}
                        "{{ join (stringSlice .) `","` }}"
                    {{- else -}}
                        "{{ $n.Name | kebab }}"
                    {{- end -}}
                },
            }, e)
            if err != nil {
                l.Error("serialization error", zap.Int("{{ $n.ID.Name }}", id), zap.Error(err))
                render.InternalServerError(w, r, nil)
                return
            }
            l.Info("{{ $n.Name | kebab }} rendered", zap.Int("{{ $n.ID.Name }}", id))
            render.OK(w, r, d)
        }
    {{ end }}
{{ end }}