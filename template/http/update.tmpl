{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "http/update" }}
    {{- with extend $ "Package" "http" -}}
        {{ template "header" . }}
    {{ end }}
    import ( {{/* This is needed for stupid SIV rule */}}
        "github.com/go-chi/chi/v5"
        "github.com/go-playground/validator/v10"
    )

    {{ $pkg := base $.Config.Package }}
    {{ range $n := $.Nodes }}
        // Payload of a {{ $pkg }}.{{ $n.Name }} update request.
        type {{ $n.Name }}UpdateRequest struct {
            {{/* TODO: Having all pointers here seems not right. Maybe this can be done in another way ... */}}
            {{ range $f := $n.Fields -}}
                {{ if not $f.Immutable -}}
                    {{ $f.StructField }} *{{ $f.Type.String }}`json:"{{ index (split (tagLookup $f.StructTag "json") ",") 0 }}"
                    {{- with validationTags $f.Annotations.Elk "update" }} validate:"{{ . }}"{{ end }}`
                {{- end }}
            {{ end -}}
            {{ range $e := $n.Edges -}}
                {{ $e.StructField }}{{ if $e.Unique }}*{{ else }}[]{{ end }}{{ $e.Type.ID.Type.String }} `json:"{{ index (split (tagLookup $e.StructTag "json") ",") 0 }}"
                {{- with validationTags $e.Annotations.Elk "update" }} validate:"{{ . }}"{{ end }}`
            {{ end }}
        }

        // Update updates a given {{ $pkg }}.{{ $n.Name }} and saves the changes to the database.
        func (h {{ $n.Name }}Handler) Update(w http.ResponseWriter, r *http.Request) {
            l := h.log.With(zap.String("method", "Update"))
            {{- template "helper/http/id-from-url" $n -}}

            // Get the post data.
            var d {{ $n.Name }}UpdateRequest
            {{- template "helper/http/decode-and-validate-request-body" $n -}}

            // Save the data.
            b := h.client.{{ $n.Name }}.UpdateOneID({{ if $n.ID.HasGoType }}{{ $n.ID.Type }}(id){{ else }}id{{ end }})
            // TODO: what about slice fields that have custom marshallers?
            {{ range $f := $n.Fields -}}
                {{ if not $f.Immutable -}}
                    if d.{{ $f.StructField }} != nil {
                        b.Set{{ $f.StructField }}(*d.{{ $f.StructField }}) {{/* todo - what about slice fields that have custom marshallers? */}}
                    }
                {{ end -}}
            {{ end -}}
            {{ range $e := $n.Edges -}}
                if d.{{ $e.StructField }} != nil {
                    {{ if $e.Unique -}}
                        b.{{ $e.MutationSet }}(*d.{{ $e.StructField }})
                    {{ else -}}
                        b.{{ $e.MutationClear }}().{{ $e.MutationAdd }}(d.{{ $e.StructField }}...)
                    {{- end }}
                }
            {{ end -}}
            // Store in database.
            e, err := b.Save(r.Context())
            if err != nil {
                switch err.(type) {
                    case *ent.NotFoundError:
                        l.Info("{{ $n.Name | kebab }} not found", zap.Int("{{ $n.ID.Name }}", id), zap.Error(err))
                        render.NotFound(w, r, "{{ $n.Name | kebab }} not found")
                    case *ent.NotSingularError:
                        l.Error("duplicate entry for {{ $n.Name | kebab }}", zap.Int("{{ $n.ID.Name }}", id), zap.Error(err))
                        render.BadRequest(w, r, "duplicate {{ $n.Name | kebab }} entry with id " + strconv.Itoa(e.{{ $n.ID.StructField }}))
                    default:
                        l.Error("error saving {{ $n.Name | kebab }}", zap.Int("{{ $n.ID.Name }}", id), zap.Error(err))
                        render.InternalServerError(w, r, nil)
                }
                return
            }
            // Reload entry.
            q := h.client.{{ $n.Name }}.Query().Where({{ $n.Name | lower }}.ID(e.{{ $n.ID.StructField }}))

            {{- with edgesToLoad $n "create" }}
                // Eager load edges that are required on update operation.
                {{ . }}
            {{- end }}
            e, err = q.Only(r.Context())

            {{- template "helper/http/reload/error-handling" . -}}

            j, err := sheriff.Marshal(&sheriff.Options{
                IncludeEmptyTag: true,
                Groups: []string{
                    {{- with $n.Annotations.ElkSchema.UpdateGroups -}}
                        "{{ join (stringSlice .) `","` }}"
                    {{- else -}}
                        "{{ $n.Name | kebab }}"
                    {{- end -}}
                },
            }, e)
            if err != nil {
                l.Error("serialization error", zap.Int("{{ $n.ID.Name }}", e.{{ $n.ID.StructField }}), zap.Error(err))
                render.InternalServerError(w, r, nil)
                return
            }
            l.Info("{{ $n.Name | kebab }} rendered", zap.Int("{{ $n.ID.Name }}", e.{{ $n.ID.StructField }}))
            render.OK(w, r, j)
        }
    {{ end }}
{{ end }}