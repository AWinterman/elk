{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "http/delete" }}
    {{- with extend $ "Package" "http" -}}
        {{ template "header" . }}
    {{ end }}
    import "github.com/go-chi/chi/v5" {{/* This is needed for stupid SIV rule */}}

    {{ $pkg := base $.Config.Package }}
    {{ range $n := $.Nodes }}
        // Delete removes a {{ $pkg }}.{{ $n.Name }} from the database.
        func (h {{ $n.Name }}Handler) Delete(w http.ResponseWriter, r *http.Request) {
            l := h.log.With(zap.String("method", "Delete"))
            {{- template "helper/http/id-from-url" $n -}}
            if err := h.client.{{ $n.Name }}.DeleteOneID({{ if $n.ID.HasGoType }}{{ $n.ID.Type }}(id){{ else }}id{{ end }}).Exec(r.Context()); err != nil {
                switch err.(type) {
                case *ent.NotFoundError:
                    msg := stripEntError(err)
                    l.Info(msg, zap.Int("{{ $n.ID.Name }}", id), zap.Error(err))
                    render.NotFound(w, r, "{{ $n.Name | kebab }} not found")
                default:
                    l.Error("error deleting {{ $n.Name | kebab }} from db", zap.Int("{{ $n.ID.Name }}", id), zap.Error(err))
                    render.InternalServerError(w, r, nil)
                }
                return
            }
            l.Info("{{ $n.Name | kebab }} deleted", zap.Int("{{ $n.ID.Name }}", id))
            render.NoContent(w)
        }
    {{ end }}
{{ end }}